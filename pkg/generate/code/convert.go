// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package code

import (
	"fmt"
	"strings"

	"github.com/aws-controllers-k8s/code-generator/pkg/generate/code/converter"
	"github.com/aws-controllers-k8s/code-generator/pkg/model"
	"github.com/aws-controllers-k8s/code-generator/pkg/model/multiversion"
)

var (
	builtinStatuses = []string{"ACKResourceMetadata", "Conditions"}
)

// Convert outputs Go code that convert a source CRD into a destination crd.
func Convert(
	// source and destination CRDs
	src, dst *model.CRD,
	// boolean instructing `Convert` on whether to output Go code for ConvertTo
	// or ConvertFrom
	isConvertingToHub bool,
	// the hub import alias. Generally it's the hub version.
	hubImportAlias string,
	// the source variable name.
	srcVarName string,
	// the destination raw variable name
	dstRawVarName string,
	// indentation level
	indentLevel int,
) string {
	out := "\n"
	indent := strings.Repeat("\t", indentLevel)

	copyFromVarName := "dst"
	copyFromRawVarName := "dstRaw"
	if !isConvertingToHub {
		copyFromVarName = "src"
		copyFromRawVarName = "srcRaw"
	}

	// cast srcRaw/dstRaw type
	// dst := dstRaw.(*v1.Repository) || src := srcRaw.(*v1.Repository)
	out += fmt.Sprintf(
		"%s%s := %s.(*%s.%s)\n",
		indent,
		copyFromVarName,
		copyFromRawVarName,
		hubImportAlias,
		dst.Names.Camel,
	)

	deltas, err := multiversion.ComputeCRDFieldDeltas(src, dst)
	if err != nil {
		msg := fmt.Sprintf("delta computation error: %v", err)
		panic(msg)
	}

	c := converter.New(
		hubImportAlias,
		src.SDKAPIPackageName(),
		isConvertingToHub,
		src.TypeRenames(),
		builtinStatuses,
		indentLevel,
	)

	// generate spec conversion code
	toVarName := "dst.Spec"
	fromVarName := "src.Spec"
	out += c.
		WithVariables(fromVarName, toVarName).
		GenerateFieldsDeltasCode(deltas.SpecDeltas)

	// generate status conversion code
	toVarName = "dst.Status"
	fromVarName = "src.Status"
	out += c.
		WithVariables(fromVarName, toVarName).
		GenerateFieldsDeltasCode(deltas.StatusDeltas)

	for _, status := range builtinStatuses {
		// dst.Status.Conditions = src.Status.Conditions
		out += fmt.Sprintf("%s%s.%s = %s.%s\n", indent, toVarName, status, fromVarName, status)
	}

	out += "\n"
	// dst.ObjectMeta = src.ObjectMeta
	out += fmt.Sprintf("%sdst.ObjectMeta = src.ObjectMeta\n", indent)
	// return nil
	out += fmt.Sprintf("%sreturn nil", indent)

	return out
}
